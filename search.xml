<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JPEG图像压缩教学</title>
      <link href="/2024/12/17/JPEG/"/>
      <url>/2024/12/17/JPEG/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>此页面用于多媒体技术大作业展示</p></div><h2 id="1-引言">1. 引言</h2><p>图像在数字化时代扮演着重要角色，无论是在日常生活中还是在专业领域，图像的存储与传输需求日益增长。然而，原始图像数据通常占用大量存储空间，传输效率低下。因此，对图像进行有效的压缩成为必要手段。本报告将详细解析JPEG（Joint Photographic Experts Group）图像压缩的原理与实现，通过代码示例帮助读者深入理解这一广泛应用的有损压缩标准。</p><h2 id="2-图像存储与压缩">2. 图像存储与压缩</h2><h3 id="2-1-图像存储">2.1 图像存储</h3><p>图像由像素（Pixel）组成，每个像素包含颜色信息。彩色图像通常采用RGB（红、绿、蓝）三通道或RGBA（红、绿、蓝、Alpha）四通道表示，其中Alpha通道用于描述透明度。以三通道图像为例，每个像素由三个值表示，如RGB（255, 255, 255）表示白色。</p><h3 id="2-2-图像压缩">2.2 图像压缩</h3><p>为了有效传输和存储图像，需对图像数据进行压缩。依据图像的保真度，图像压缩可分为无损压缩和有损压缩。</p><h4 id="2-2-1-无损压缩">2.2.1 无损压缩</h4><p>无损压缩的基本原理是相同的颜色信息只需保存一次。无损压缩保证解压后的数据与原始数据完全一致，是一种可逆过程。无损压缩算法通常通过去除或减少数据中的冗余来实现，常见的无损压缩算法包括PNG、GIF等。一般情况下，无损压缩可以将文件大小缩减到原来的1/2至1/4。</p><h4 id="2-2-2-有损压缩">2.2.2 有损压缩</h4><p>有损压缩在压缩过程中舍弃部分图像信息，导致解压后的图像与原始图像不完全一致，是一种不可逆的压缩方式。有损压缩通过保留人眼不易察觉的细节信息，显著降低图像文件大小，同时尽量保持图像质量。常见的有损压缩格式包括JPEG、WebP等。由于信息量减少，压缩比可以非常高，但图像质量可能会有所下降。</p><h3 id="2-3-图像格式">2.3 图像格式</h3><p>常见的图像格式分为有损和无损两类：</p><ul><li><strong>有损格式</strong>：JPEG、WebP</li><li><strong>无损格式</strong>：PNG、BMP、GIF</li></ul><p>图像格式通常通过文件的后缀名来区分，但有时后缀名可能不准确。实际的图片格式可通过查看图片数据的头部信息来确定。例如：</p><ul><li><strong>JPEG</strong>：以<code>0xFF D8</code>开头，以<code>0xFF D9</code>结尾。</li><li><strong>PNG</strong>：以<code>0x89 50 4E 47 0D 0A 1A 0A</code>开头，以<code>00 00 00 00 49 45 4E 44 AE 42 60 82</code>结尾。</li></ul><h2 id="3-JPEG压缩">3. JPEG压缩</h2><h3 id="3-1-JPEG概述">3.1 JPEG概述</h3><p>JPEG是一种广泛应用的有损图像压缩标准，特别适用于自然图像的压缩。JPEG文件格式常见的扩展名有<code>.jpg</code>和<code>.jpeg</code>，两者在实质上是相同的。JPEG压缩通过减少人眼不易察觉的信息，显著降低图像文件大小，同时尽量保持图像质量。</p><h3 id="3-2-JPEG压缩步骤">3.2 JPEG压缩步骤</h3><p>JPEG压缩过程包括多个步骤，每个步骤都旨在通过不同的方法减少图像数据量，同时尽量保持图像质量。以下将详细介绍每个步骤的原理与实现。</p><h4 id="3-2-1-色彩空间转换">3.2.1 色彩空间转换</h4><p>人眼对亮度信息比色度信息更敏感，因此JPEG首先将图像从RGB颜色空间转换为YUV（或YCrCb）颜色空间，其中：</p><ul><li><strong>Y</strong>：表示亮度（明亮度），即灰度值。</li><li><strong>U</strong> 和 <strong>V</strong>：表示色度，用于描述图像的色彩和饱和度。</li></ul><p>转换公式如下：</p><p>$$<br>Y=0.299R+0.587G+0.114B<br>$$</p><p>$$<br>U=0.5R−0.4187G−0.0813B+128<br>$$</p><p>$$<br>V = -0.1687R - 0.3313G + 0.5B + 128<br>$$</p><p><strong>Python实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb_to_yuv</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将RGB图像转换为YUV颜色空间&quot;&quot;&quot;</span></span><br><span class="line">    img = np.array(image, dtype=np.float32)</span><br><span class="line">    R = img[:, :, <span class="number">0</span>]</span><br><span class="line">    G = img[:, :, <span class="number">1</span>]</span><br><span class="line">    B = img[:, :, <span class="number">2</span>]</span><br><span class="line">    Y = np.<span class="built_in">round</span>(<span class="number">0.299</span> * R + <span class="number">0.587</span> * G + <span class="number">0.114</span> * B)</span><br><span class="line">    U = np.<span class="built_in">round</span>(<span class="number">0.5</span> * R - <span class="number">0.4187</span> * G - <span class="number">0.0813</span> * B + <span class="number">128</span>)</span><br><span class="line">    V = np.<span class="built_in">round</span>(-<span class="number">0.1687</span> * R - <span class="number">0.3313</span> * G + <span class="number">0.5</span> * B + <span class="number">128</span>)</span><br><span class="line">    Y = np.clip(Y, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    U = np.clip(U, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    V = np.clip(V, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> Y, U, V</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yuv_to_rgb</span>(<span class="params">Y, U, V</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将YUV颜色空间转换回RGB&quot;&quot;&quot;</span></span><br><span class="line">    Y = Y.astype(np.float32)</span><br><span class="line">    U = U.astype(np.float32) - <span class="number">128</span></span><br><span class="line">    V = V.astype(np.float32) - <span class="number">128</span></span><br><span class="line">    R = Y + <span class="number">1.402</span> * V</span><br><span class="line">    G = Y - <span class="number">0.344136</span> * U - <span class="number">0.714136</span> * V</span><br><span class="line">    B = Y + <span class="number">1.772</span> * U</span><br><span class="line">    R = np.clip(R, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    G = np.clip(G, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    B = np.clip(B, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> np.stack([R, G, B], axis=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 读取图像</span></span><br><span class="line">    image = cv2.imread(<span class="string">&#x27;data/dog.jpg&#x27;</span>)</span><br><span class="line">    Y, U, V = rgb_to_yuv(image)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存Y、U、V通道图像</span></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;Y.png&#x27;</span>, Y)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;U.png&#x27;</span>, U)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;V.png&#x27;</span>, V)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;YUV.png&#x27;</span>, cv2.merge([Y, U, V]))</span><br></pre></td></tr></table></figure><h4 id="3-2-2-降采样">3.2.2 降采样</h4><p>由于人眼对色度信息不如亮度信息敏感，JPEG利用这一特点对U和V色度分量进行下采样，以减少数据量。常用的下采样方式为4:2:0，即色度分量的水平和垂直分辨率都减半。</p><p><strong>Python实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">downsample</span>(<span class="params">Y, U, V</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对色度分量进行4:2:0下采样&quot;&quot;&quot;</span></span><br><span class="line">    U_ds = U[::<span class="number">2</span>, ::<span class="number">2</span>]</span><br><span class="line">    V_ds = V[::<span class="number">2</span>, ::<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> Y, U_ds, V_ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upsample</span>(<span class="params">U_ds, V_ds</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对色度分量进行上采样&quot;&quot;&quot;</span></span><br><span class="line">    U = U_ds.repeat(<span class="number">2</span>, axis=<span class="number">0</span>).repeat(<span class="number">2</span>, axis=<span class="number">1</span>)</span><br><span class="line">    V = V_ds.repeat(<span class="number">2</span>, axis=<span class="number">0</span>).repeat(<span class="number">2</span>, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> U, V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    image = cv2.imread(<span class="string">&#x27;data/dog.jpg&#x27;</span>)</span><br><span class="line">    Y, U, V = rgb_to_yuv(image)</span><br><span class="line">    Y_ds, U_ds, V_ds = downsample(Y, U, V)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存下采样后的色度分量</span></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;Y_downsampled.png&#x27;</span>, Y_ds)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;U_downsampled.png&#x27;</span>, U_ds)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;V_downsampled.png&#x27;</span>, V_ds)</span><br></pre></td></tr></table></figure><h4 id="3-2-3-离散余弦变换（DCT）">3.2.3 离散余弦变换（DCT）</h4><p>人类视觉对高频信息不敏感，离散余弦变换（DCT）用于将图像从空间域转换到频率域，分析图像中高低频信息的含量。JPEG将图像分为8x8的像素块，对每个像素块应用二维DCT，将数据集中到低频部分。</p><p>二维离散余弦变换公式为：</p><p>$$<br>F(u, v) = \frac{1}{4} C(u) C(v) \sum_{x=0}^{7} \sum_{y=0}^{7} f(x, y) \cos \left[\frac{(2x+1)u\pi}{16}\right] \cos \left[\frac{(2y+1)v\pi}{16}\right]<br>$$<br><strong>Python实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alpha</span>(<span class="params">u</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / math.sqrt(<span class="number">2</span>) <span class="keyword">if</span> u == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DCT_block</span>(<span class="params">block</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对8x8块进行二维DCT&quot;&quot;&quot;</span></span><br><span class="line">    block = block.astype(np.float32) - <span class="number">128</span>  <span class="comment"># 中心化</span></span><br><span class="line">    dct = np.zeros((<span class="number">8</span>, <span class="number">8</span>), dtype=np.float32)</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            sum_val = <span class="number">0.0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    sum_val += block[x, y] * math.cos((<span class="number">2</span>*x + <span class="number">1</span>) * u * math.pi / <span class="number">16</span>) * math.cos((<span class="number">2</span>*y + <span class="number">1</span>) * v * math.pi / <span class="number">16</span>)</span><br><span class="line">            dct[u, v] = <span class="number">0.25</span> * alpha(u) * alpha(v) * sum_val</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">round</span>(dct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_dct</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对整个图像应用DCT变换&quot;&quot;&quot;</span></span><br><span class="line">    h, w = image.shape</span><br><span class="line">    <span class="comment"># 填充图像，使其高度和宽度都是8的倍数</span></span><br><span class="line">    h_padded = h <span class="keyword">if</span> h % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> h + (<span class="number">8</span> - h % <span class="number">8</span>)</span><br><span class="line">    w_padded = w <span class="keyword">if</span> w % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> w + (<span class="number">8</span> - w % <span class="number">8</span>)</span><br><span class="line">    padded = np.zeros((h_padded, w_padded), dtype=np.float32)</span><br><span class="line">    padded[:h, :w] = image</span><br><span class="line">    blocks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h_padded, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w_padded, <span class="number">8</span>):</span><br><span class="line">            block = padded[i:i+<span class="number">8</span>, j:j+<span class="number">8</span>]</span><br><span class="line">            dct_block = DCT_block(block)</span><br><span class="line">            blocks.append(dct_block)</span><br><span class="line">    <span class="keyword">return</span> blocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    image = cv2.imread(<span class="string">&#x27;data/dog.jpg&#x27;</span>)</span><br><span class="line">    Y, U, V = rgb_to_yuv(image)</span><br><span class="line">    Y_ds, U_ds, V_ds = downsample(Y, U, V)</span><br><span class="line">    dct_blocks = apply_dct(Y_ds)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印第一个DCT块</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一个DCT块:\n&quot;</span>, dct_blocks[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一个DCT块:</span><br><span class="line"> <span class="comment">[<span class="comment">[  39.    4.   -4.    0.    0.    2.   -2.   -1.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  -1.   -1.    0.    0.    0.    0.    1.    0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[   0.    0.    0.    0.    0.    0.    0.    0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[   0.    0.    0.    0.    0.    0.    0.    0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[   0.    0.    0.    0.    0.    0.    0.    0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[   0.    0.    0.    0.    0.    0.    0.    0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[   0.    0.    0.    0.    0.    0.    0.    0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[   0.    0.    0.    0.    0.    0.    0.    0.]</span>]</span></span><br></pre></td></tr></table></figure><h4 id="3-2-4-量化">3.2.4 量化</h4><p>量化是JPEG压缩中关键的一步，通过对DCT系数进行舍入，减少数据精度，从而降低文件大小。量化过程使用预定义的量化矩阵，通常根据输出图像的质量需求自定义。量化矩阵中的数值越大，表示对相应频率信息的舍弃越多，压缩率越高，图像质量下降越明显。</p><p><strong>标准量化矩阵（亮度）：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QY = np.array([</span><br><span class="line">    [<span class="number">16</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">61</span>],</span><br><span class="line">    [<span class="number">12</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">19</span>,<span class="number">26</span>,<span class="number">58</span>,<span class="number">60</span>,<span class="number">55</span>],</span><br><span class="line">    [<span class="number">14</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">57</span>,<span class="number">69</span>,<span class="number">56</span>],</span><br><span class="line">    [<span class="number">14</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">51</span>,<span class="number">87</span>,<span class="number">80</span>,<span class="number">62</span>],</span><br><span class="line">    [<span class="number">18</span>,<span class="number">22</span>,<span class="number">37</span>,<span class="number">56</span>,<span class="number">68</span>,<span class="number">109</span>,<span class="number">103</span>,<span class="number">77</span>],</span><br><span class="line">    [<span class="number">24</span>,<span class="number">35</span>,<span class="number">55</span>,<span class="number">64</span>,<span class="number">81</span>,<span class="number">104</span>,<span class="number">113</span>,<span class="number">92</span>],</span><br><span class="line">    [<span class="number">49</span>,<span class="number">64</span>,<span class="number">78</span>,<span class="number">87</span>,<span class="number">103</span>,<span class="number">121</span>,<span class="number">120</span>,<span class="number">101</span>],</span><br><span class="line">    [<span class="number">72</span>,<span class="number">92</span>,<span class="number">95</span>,<span class="number">98</span>,<span class="number">112</span>,<span class="number">100</span>,<span class="number">103</span>,<span class="number">99</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><strong>Python实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quantize</span>(<span class="params">blocks, Q</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对DCT系数进行量化&quot;&quot;&quot;</span></span><br><span class="line">    quantized = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        quant = np.<span class="built_in">round</span>(block / Q).astype(np.int32)</span><br><span class="line">        quantized.append(quant)</span><br><span class="line">    <span class="keyword">return</span> quantized</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 继续前面的代码</span></span><br><span class="line">    quantized_blocks = quantize(dct_blocks, QY)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印第一个量化块</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一个量化块:\n&quot;</span>, quantized_blocks[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一个量化块:</span><br><span class="line"> <span class="comment">[<span class="comment">[  2.  0. -0.  0.  0.  0. -0.  0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  0.  0.  0.  0.  0.  0.  0.  0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  0.  0.  0.  0.  0.  0.  0.  0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  0.  0.  0.  0.  0.  0.  0.  0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  0.  0.  0.  0.  0.  0.  0.  0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  0.  0.  0.  0.  0.  0.  0.  0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  0.  0.  0.  0.  0.  0.  0.  0.]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[  0.  0.  0.  0.  0.  0.  0.  0.]</span>]</span></span><br></pre></td></tr></table></figure><h4 id="3-2-5-ZIGZAG排序">3.2.5 ZIGZAG排序</h4><p>量化后的8x8块中，低频信息集中在左上角，高频信息分散在右下角。为了进一步压缩数据，JPEG采用ZIGZAG（锯齿形）排序，将二维矩阵转换为一维数组，有效地将零值集中在数组的末尾，从而便于后续的编码。</p><p><strong>ZIGZAG排序示意：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">00 </span><span class="number">01</span> <span class="number">05</span> <span class="number">06</span> <span class="number">14</span> <span class="number">15</span> <span class="number">27</span> <span class="number">28</span></span><br><span class="line"><span class="symbol">02 </span><span class="number">04</span> <span class="number">07</span> <span class="number">13</span> <span class="number">16</span> <span class="number">26</span> <span class="number">29</span> <span class="number">42</span></span><br><span class="line"><span class="symbol">03 </span><span class="number">08</span> <span class="number">12</span> <span class="number">17</span> <span class="number">25</span> <span class="number">30</span> <span class="number">41</span> <span class="number">43</span></span><br><span class="line"><span class="symbol">09 </span><span class="number">11</span> <span class="number">18</span> <span class="number">24</span> <span class="number">31</span> <span class="number">40</span> <span class="number">44</span> <span class="number">53</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">19</span> <span class="number">23</span> <span class="number">32</span> <span class="number">39</span> <span class="number">45</span> <span class="number">52</span> <span class="number">54</span></span><br><span class="line"><span class="symbol">20 </span><span class="number">22</span> <span class="number">33</span> <span class="number">38</span> <span class="number">46</span> <span class="number">51</span> <span class="number">55</span> <span class="number">60</span></span><br><span class="line"><span class="symbol">21 </span><span class="number">34</span> <span class="number">37</span> <span class="number">47</span> <span class="number">50</span> <span class="number">56</span> <span class="number">59</span> <span class="number">61</span></span><br><span class="line"><span class="symbol">35 </span><span class="number">36</span> <span class="number">48</span> <span class="number">49</span> <span class="number">57</span> <span class="number">58</span> <span class="number">62</span> <span class="number">63</span></span><br></pre></td></tr></table></figure><p><strong>Python实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zigzag_order</span>(<span class="params">block</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对8x8块进行ZIGZAG排序&quot;&quot;&quot;</span></span><br><span class="line">    zigzag_indices = [</span><br><span class="line">        (<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">2</span>),(<span class="number">0</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="number">0</span>),(<span class="number">4</span>,<span class="number">0</span>),(<span class="number">3</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">0</span>,<span class="number">4</span>),(<span class="number">0</span>,<span class="number">5</span>),</span><br><span class="line">        (<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="number">0</span>),(<span class="number">6</span>,<span class="number">0</span>),(<span class="number">5</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">1</span>,<span class="number">5</span>),(<span class="number">0</span>,<span class="number">6</span>),(<span class="number">0</span>,<span class="number">7</span>),(<span class="number">1</span>,<span class="number">6</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="number">4</span>,<span class="number">3</span>),(<span class="number">5</span>,<span class="number">2</span>),(<span class="number">6</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="number">0</span>),(<span class="number">7</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">6</span>),(<span class="number">1</span>,<span class="number">7</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">4</span>),(<span class="number">6</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="number">7</span>,<span class="number">2</span>),(<span class="number">7</span>,<span class="number">3</span>),(<span class="number">6</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">6</span>),(<span class="number">3</span>,<span class="number">7</span>),(<span class="number">4</span>,<span class="number">7</span>),(<span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">        (<span class="number">6</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">4</span>),(<span class="number">7</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">6</span>),(<span class="number">5</span>,<span class="number">7</span>),(<span class="number">6</span>,<span class="number">7</span>),(<span class="number">7</span>,<span class="number">6</span>),(<span class="number">7</span>,<span class="number">7</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> [block[i][j] <span class="keyword">for</span> i, j <span class="keyword">in</span> zigzag_indices]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zigzag</span>(<span class="params">blocks</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对所有块进行ZIGZAG排序&quot;&quot;&quot;</span></span><br><span class="line">    zigzagged = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        z = zigzag_order(block)</span><br><span class="line">        zigzagged.append(z)</span><br><span class="line">    <span class="keyword">return</span> zigzagged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 继续前面的代码</span></span><br><span class="line">    zigzagged_blocks = zigzag(quantized_blocks)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印第一个ZIGZAG排序后的块</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一个ZIGZAG排序后的块:\n&quot;</span>, zigzagged_blocks[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个ZIGZAG排序后的块:</span><br><span class="line"> [2.0, 0.0, <span class="string">-0</span>.0, 0.0, 0.0, 0.0, <span class="string">-0</span>.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span><br></pre></td></tr></table></figure><h4 id="3-2-6-差分脉冲编码调制（DPCM）对直流系数（DC）编码">3.2.6 差分脉冲编码调制（DPCM）对直流系数（DC）编码</h4><p>在ZIGZAG排序后的数据中，第一个元素为直流（DC）系数，代表块的平均亮度。由于相邻块的DC系数变化较小，JPEG采用差分脉冲编码调制（DPCM）技术对DC系数进行编码，通过存储DC系数与前一个块DC系数的差值来减少数据量。</p><p><strong>Python实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DPCM_dc</span>(<span class="params">zigzagged</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对ZIGZAG排序后的块进行DPCM编码&quot;&quot;&quot;</span></span><br><span class="line">    dpcm = []</span><br><span class="line">    previous = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> zigzagged:</span><br><span class="line">        current = block[<span class="number">0</span>]</span><br><span class="line">        diff = current - previous</span><br><span class="line">        dpcm.append(diff)</span><br><span class="line">        previous = current</span><br><span class="line">    <span class="keyword">return</span> dpcm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 继续前面的代码</span></span><br><span class="line">    dpcm_dc = DPCM_dc(zigzagged_blocks)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印前十个DC差分值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;前十个DC差分值:\n&quot;</span>, dpcm_dc[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p><strong>结果展示：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前十个DC差分值:</span><br><span class="line"> [50.0, <span class="string">-2</span>.0, <span class="string">-13</span>.0, <span class="string">-7</span>.0, <span class="string">-3</span>.0, 0.0, <span class="string">-1</span>.0, 0.0, <span class="string">-1</span>.0, <span class="string">-2</span>.0]</span><br></pre></td></tr></table></figure><h4 id="3-2-7-行程长度编码（RLE）对交流系数（AC）编码">3.2.7 行程长度编码（RLE）对交流系数（AC）编码</h4><p>交流（AC）系数表示块中的细节信息，通常集中在低频部分。JPEG采用行程长度编码（Run-Length Encoding，RLE）对AC系数进行编码，记录连续零值的数量和非零值的具体数值。这种方法有效地压缩了高频信息中大量的零值。</p><p><strong>Python实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RLE_ac</span>(<span class="params">zigzagged</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对ZIGZAG排序后的块进行RLE编码&quot;&quot;&quot;</span></span><br><span class="line">    rle = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> zigzagged:</span><br><span class="line">        ac = []</span><br><span class="line">        zero_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> coef <span class="keyword">in</span> block[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> coef == <span class="number">0</span>:</span><br><span class="line">                zero_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> zero_count &gt; <span class="number">15</span>:</span><br><span class="line">                    ac.append((<span class="number">15</span>, <span class="number">0</span>))</span><br><span class="line">                    zero_count -= <span class="number">16</span></span><br><span class="line">                ac.append((zero_count, coef))</span><br><span class="line">                zero_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> zero_count &gt; <span class="number">0</span>:</span><br><span class="line">            ac.append((<span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># End of Block</span></span><br><span class="line">        rle.append(ac)</span><br><span class="line">    <span class="keyword">return</span> rle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 继续前面的代码</span></span><br><span class="line">    rle_ac = RLE_ac(zigzagged_blocks)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印第一个RLE编码结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一个RLE编码结果:\n&quot;</span>, rle_ac[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><strong>结果展示：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个RLE编码结果:</span><br><span class="line"><span class="string"> [(0, 0)]</span></span><br></pre></td></tr></table></figure><h4 id="3-2-8-熵编码">3.2.8 熵编码</h4><p>JPEG采用霍夫曼编码（Huffman Coding）对量化后的数据进行熵编码，以进一步压缩数据量。霍夫曼编码通过为高频出现的符号分配较短的码字，低频符号分配较长的码字，实现数据压缩。JPEG标准中，DC系数和AC系数分别采用不同的霍夫曼编码表，并根据亮度和色度信息使用不同的编码表。</p><p><strong>注意</strong>：本报告中的代码实现简化了熵编码过程，未涵盖完整的霍夫曼编码实现。实际应用中，需使用专业的熵编码库或自行实现霍夫曼编码算法。</p><h3 id="3-3-代码实现">3.3 代码实现</h3><p>综合上述步骤，以下是完整的JPEG压缩与解压缩的简化Python代码实现。该实现涵盖了色彩空间转换、下采样、DCT、量化、ZIGZAG排序、DPCM和RLE编码，但未涉及霍夫曼编码和更复杂的压缩优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb_to_yuv</span>(<span class="params">image</span>):</span><br><span class="line">    img = np.array(image, dtype=np.float32)</span><br><span class="line">    R = img[:, :, <span class="number">0</span>]</span><br><span class="line">    G = img[:, :, <span class="number">1</span>]</span><br><span class="line">    B = img[:, :, <span class="number">2</span>]</span><br><span class="line">    Y = np.<span class="built_in">round</span>(<span class="number">0.299</span> * R + <span class="number">0.587</span> * G + <span class="number">0.114</span> * B)</span><br><span class="line">    U = np.<span class="built_in">round</span>(<span class="number">0.5</span> * R - <span class="number">0.4187</span> * G - <span class="number">0.0813</span> * B + <span class="number">128</span>)</span><br><span class="line">    V = np.<span class="built_in">round</span>(-<span class="number">0.1687</span> * R - <span class="number">0.3313</span> * G + <span class="number">0.5</span> * B + <span class="number">128</span>)</span><br><span class="line">    Y = np.clip(Y, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    U = np.clip(U, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    V = np.clip(V, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> Y, U, V</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yuv_to_rgb</span>(<span class="params">Y, U, V</span>):</span><br><span class="line">    Y = Y.astype(np.float32)</span><br><span class="line">    U = U.astype(np.float32) - <span class="number">128</span></span><br><span class="line">    V = V.astype(np.float32) - <span class="number">128</span></span><br><span class="line">    R = Y + <span class="number">1.402</span> * V</span><br><span class="line">    G = Y - <span class="number">0.344136</span> * U - <span class="number">0.714136</span> * V</span><br><span class="line">    B = Y + <span class="number">1.772</span> * U</span><br><span class="line">    R = np.clip(R, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    G = np.clip(G, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    B = np.clip(B, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> np.stack([R, G, B], axis=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downsample</span>(<span class="params">Y, U, V</span>):</span><br><span class="line">    U_ds = U[::<span class="number">2</span>, ::<span class="number">2</span>]</span><br><span class="line">    V_ds = V[::<span class="number">2</span>, ::<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> Y, U_ds, V_ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upsample</span>(<span class="params">U_ds, V_ds</span>):</span><br><span class="line">    U = U_ds.repeat(<span class="number">2</span>, axis=<span class="number">0</span>).repeat(<span class="number">2</span>, axis=<span class="number">1</span>)</span><br><span class="line">    V = V_ds.repeat(<span class="number">2</span>, axis=<span class="number">0</span>).repeat(<span class="number">2</span>, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> U, V</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alpha</span>(<span class="params">u</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / math.sqrt(<span class="number">2</span>) <span class="keyword">if</span> u == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DCT_block</span>(<span class="params">block</span>):</span><br><span class="line">    block = block.astype(np.float32) - <span class="number">128</span></span><br><span class="line">    dct = np.zeros((<span class="number">8</span>, <span class="number">8</span>), dtype=np.float32)</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            sum_val = <span class="number">0.0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    sum_val += block[x, y] * math.cos((<span class="number">2</span>*x + <span class="number">1</span>) * u * math.pi / <span class="number">16</span>) * math.cos((<span class="number">2</span>*y + <span class="number">1</span>) * v * math.pi / <span class="number">16</span>)</span><br><span class="line">            dct[u, v] = <span class="number">0.25</span> * alpha(u) * alpha(v) * sum_val</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">round</span>(dct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_dct</span>(<span class="params">image</span>):</span><br><span class="line">    h, w = image.shape</span><br><span class="line">    h_padded = h <span class="keyword">if</span> h % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> h + (<span class="number">8</span> - h % <span class="number">8</span>)</span><br><span class="line">    w_padded = w <span class="keyword">if</span> w % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> w + (<span class="number">8</span> - w % <span class="number">8</span>)</span><br><span class="line">    padded = np.zeros((h_padded, w_padded), dtype=np.float32)</span><br><span class="line">    padded[:h, :w] = image</span><br><span class="line">    blocks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h_padded, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w_padded, <span class="number">8</span>):</span><br><span class="line">            block = padded[i:i+<span class="number">8</span>, j:j+<span class="number">8</span>]</span><br><span class="line">            dct_block = DCT_block(block)</span><br><span class="line">            blocks.append(dct_block)</span><br><span class="line">    <span class="keyword">return</span> blocks</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quantize</span>(<span class="params">blocks, Q</span>):</span><br><span class="line">    quantized = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        quant = np.<span class="built_in">round</span>(block / Q).astype(np.int32)</span><br><span class="line">        quantized.append(quant)</span><br><span class="line">    <span class="keyword">return</span> quantized</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zigzag_order</span>(<span class="params">block</span>):</span><br><span class="line">    zigzag_indices = [</span><br><span class="line">        (<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">2</span>),(<span class="number">0</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="number">0</span>),(<span class="number">4</span>,<span class="number">0</span>),(<span class="number">3</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">0</span>,<span class="number">4</span>),(<span class="number">0</span>,<span class="number">5</span>),</span><br><span class="line">        (<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="number">0</span>),(<span class="number">6</span>,<span class="number">0</span>),(<span class="number">5</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">1</span>,<span class="number">5</span>),(<span class="number">0</span>,<span class="number">6</span>),(<span class="number">0</span>,<span class="number">7</span>),(<span class="number">1</span>,<span class="number">6</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="number">4</span>,<span class="number">3</span>),(<span class="number">5</span>,<span class="number">2</span>),(<span class="number">6</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="number">0</span>),(<span class="number">7</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">6</span>),(<span class="number">1</span>,<span class="number">7</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">4</span>),(<span class="number">6</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="number">7</span>,<span class="number">2</span>),(<span class="number">7</span>,<span class="number">3</span>),(<span class="number">6</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">6</span>),(<span class="number">3</span>,<span class="number">7</span>),(<span class="number">4</span>,<span class="number">7</span>),(<span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">        (<span class="number">6</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">4</span>),(<span class="number">7</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">6</span>),(<span class="number">5</span>,<span class="number">7</span>),(<span class="number">6</span>,<span class="number">7</span>),(<span class="number">7</span>,<span class="number">6</span>),(<span class="number">7</span>,<span class="number">7</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> [block[i][j] <span class="keyword">for</span> i, j <span class="keyword">in</span> zigzag_indices]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zigzag</span>(<span class="params">blocks</span>):</span><br><span class="line">    zigzagged = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        z = zigzag_order(block)</span><br><span class="line">        zigzagged.append(z)</span><br><span class="line">    <span class="keyword">return</span> zigzagged</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DPCM_dc</span>(<span class="params">zigzagged</span>):</span><br><span class="line">    dpcm = []</span><br><span class="line">    previous = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> zigzagged:</span><br><span class="line">        current = block[<span class="number">0</span>]</span><br><span class="line">        diff = current - previous</span><br><span class="line">        dpcm.append(diff)</span><br><span class="line">        previous = current</span><br><span class="line">    <span class="keyword">return</span> dpcm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RLE_ac</span>(<span class="params">zigzagged</span>):</span><br><span class="line">    rle = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> zigzagged:</span><br><span class="line">        ac = []</span><br><span class="line">        zero_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> coef <span class="keyword">in</span> block[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> coef == <span class="number">0</span>:</span><br><span class="line">                zero_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> zero_count &gt; <span class="number">15</span>:</span><br><span class="line">                    ac.append((<span class="number">15</span>, <span class="number">0</span>))</span><br><span class="line">                    zero_count -= <span class="number">16</span></span><br><span class="line">                ac.append((zero_count, coef))</span><br><span class="line">                zero_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> zero_count &gt; <span class="number">0</span>:</span><br><span class="line">            ac.append((<span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># End of Block</span></span><br><span class="line">        rle.append(ac)</span><br><span class="line">    <span class="keyword">return</span> rle</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jpeg_compress</span>(<span class="params">image_path</span>):</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    Y, U, V = rgb_to_yuv(image)</span><br><span class="line">    Y_ds, U_ds, V_ds = downsample(Y, U, V)</span><br><span class="line">    dct_blocks = apply_dct(Y_ds)</span><br><span class="line">    QY = np.array([</span><br><span class="line">        [<span class="number">16</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">61</span>],</span><br><span class="line">        [<span class="number">12</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">19</span>,<span class="number">26</span>,<span class="number">58</span>,<span class="number">60</span>,<span class="number">55</span>],</span><br><span class="line">        [<span class="number">14</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">57</span>,<span class="number">69</span>,<span class="number">56</span>],</span><br><span class="line">        [<span class="number">14</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">51</span>,<span class="number">87</span>,<span class="number">80</span>,<span class="number">62</span>],</span><br><span class="line">        [<span class="number">18</span>,<span class="number">22</span>,<span class="number">37</span>,<span class="number">56</span>,<span class="number">68</span>,<span class="number">109</span>,<span class="number">103</span>,<span class="number">77</span>],</span><br><span class="line">        [<span class="number">24</span>,<span class="number">35</span>,<span class="number">55</span>,<span class="number">64</span>,<span class="number">81</span>,<span class="number">104</span>,<span class="number">113</span>,<span class="number">92</span>],</span><br><span class="line">        [<span class="number">49</span>,<span class="number">64</span>,<span class="number">78</span>,<span class="number">87</span>,<span class="number">103</span>,<span class="number">121</span>,<span class="number">120</span>,<span class="number">101</span>],</span><br><span class="line">        [<span class="number">72</span>,<span class="number">92</span>,<span class="number">95</span>,<span class="number">98</span>,<span class="number">112</span>,<span class="number">100</span>,<span class="number">103</span>,<span class="number">99</span>]</span><br><span class="line">    ])</span><br><span class="line">    quantized_blocks = quantize(dct_blocks, QY)</span><br><span class="line">    zigzagged_blocks = zigzag(quantized_blocks)</span><br><span class="line">    dpcm_dc = DPCM_dc(zigzagged_blocks)</span><br><span class="line">    rle_ac = RLE_ac(zigzagged_blocks)</span><br><span class="line">    <span class="comment"># 简化处理：这里只返回编码后的DC和AC系数</span></span><br><span class="line">    <span class="keyword">return</span> dpcm_dc, rle_ac</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jpeg_decompress</span>(<span class="params">dpcm_dc, rle_ac, image_shape</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;简化的JPEG解压缩过程&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 重建DC系数</span></span><br><span class="line">    dc = []</span><br><span class="line">    previous = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> diff <span class="keyword">in</span> dpcm_dc:</span><br><span class="line">        current = previous + diff</span><br><span class="line">        dc.append(current)</span><br><span class="line">        previous = current</span><br><span class="line">    <span class="comment"># 重建AC系数</span></span><br><span class="line">    zigzagged = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dc)):</span><br><span class="line">        block = [dc[i]]</span><br><span class="line">        ac = rle_ac[i]</span><br><span class="line">        <span class="keyword">for</span> run, coef <span class="keyword">in</span> ac:</span><br><span class="line">            <span class="keyword">if</span> run == <span class="number">0</span> <span class="keyword">and</span> coef == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># End of Block</span></span><br><span class="line">                block.extend([<span class="number">0</span>] * (<span class="number">63</span> - <span class="built_in">len</span>(block) + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            block.extend([<span class="number">0</span>] * run)</span><br><span class="line">            block.append(coef)</span><br><span class="line">        <span class="comment"># 填充剩余的0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(block) &lt; <span class="number">64</span>:</span><br><span class="line">            block.extend([<span class="number">0</span>] * (<span class="number">64</span> - <span class="built_in">len</span>(block)))</span><br><span class="line">        zigzagged.append(block)</span><br><span class="line">    <span class="comment"># 反ZIGZAG排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inverse_zigzag</span>(<span class="params">z</span>):</span><br><span class="line">        block = np.zeros((<span class="number">8</span>, <span class="number">8</span>), dtype=np.float32)</span><br><span class="line">        zigzag_indices = [</span><br><span class="line">            (<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">2</span>),(<span class="number">0</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">            (<span class="number">2</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="number">0</span>),(<span class="number">4</span>,<span class="number">0</span>),(<span class="number">3</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">0</span>,<span class="number">4</span>),(<span class="number">0</span>,<span class="number">5</span>),</span><br><span class="line">            (<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="number">0</span>),(<span class="number">6</span>,<span class="number">0</span>),(<span class="number">5</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="number">2</span>),</span><br><span class="line">            (<span class="number">3</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">1</span>,<span class="number">5</span>),(<span class="number">0</span>,<span class="number">6</span>),(<span class="number">0</span>,<span class="number">7</span>),(<span class="number">1</span>,<span class="number">6</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">            (<span class="number">4</span>,<span class="number">3</span>),(<span class="number">5</span>,<span class="number">2</span>),(<span class="number">6</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="number">0</span>),(<span class="number">7</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">4</span>),</span><br><span class="line">            (<span class="number">3</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">6</span>),(<span class="number">1</span>,<span class="number">7</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">4</span>),(<span class="number">6</span>,<span class="number">3</span>),</span><br><span class="line">            (<span class="number">7</span>,<span class="number">2</span>),(<span class="number">7</span>,<span class="number">3</span>),(<span class="number">6</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">6</span>),(<span class="number">3</span>,<span class="number">7</span>),(<span class="number">4</span>,<span class="number">7</span>),(<span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">            (<span class="number">6</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">4</span>),(<span class="number">7</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">6</span>),(<span class="number">5</span>,<span class="number">7</span>),(<span class="number">6</span>,<span class="number">7</span>),(<span class="number">7</span>,<span class="number">6</span>),(<span class="number">7</span>,<span class="number">7</span>)</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> idx, (i, j) <span class="keyword">in</span> <span class="built_in">enumerate</span>(zigzag_indices):</span><br><span class="line">            block[i, j] = z[idx]</span><br><span class="line">        <span class="keyword">return</span> block</span><br><span class="line"></span><br><span class="line">    quantized_blocks = [inverse_zigzag(z) <span class="keyword">for</span> z <span class="keyword">in</span> zigzagged]</span><br><span class="line">    <span class="comment"># 反量化</span></span><br><span class="line">    QY = np.array([</span><br><span class="line">        [<span class="number">16</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">61</span>],</span><br><span class="line">        [<span class="number">12</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">19</span>,<span class="number">26</span>,<span class="number">58</span>,<span class="number">60</span>,<span class="number">55</span>],</span><br><span class="line">        [<span class="number">14</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">57</span>,<span class="number">69</span>,<span class="number">56</span>],</span><br><span class="line">        [<span class="number">14</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">51</span>,<span class="number">87</span>,<span class="number">80</span>,<span class="number">62</span>],</span><br><span class="line">        [<span class="number">18</span>,<span class="number">22</span>,<span class="number">37</span>,<span class="number">56</span>,<span class="number">68</span>,<span class="number">109</span>,<span class="number">103</span>,<span class="number">77</span>],</span><br><span class="line">        [<span class="number">24</span>,<span class="number">35</span>,<span class="number">55</span>,<span class="number">64</span>,<span class="number">81</span>,<span class="number">104</span>,<span class="number">113</span>,<span class="number">92</span>],</span><br><span class="line">        [<span class="number">49</span>,<span class="number">64</span>,<span class="number">78</span>,<span class="number">87</span>,<span class="number">103</span>,<span class="number">121</span>,<span class="number">120</span>,<span class="number">101</span>],</span><br><span class="line">        [<span class="number">72</span>,<span class="number">92</span>,<span class="number">95</span>,<span class="number">98</span>,<span class="number">112</span>,<span class="number">100</span>,<span class="number">103</span>,<span class="number">99</span>]</span><br><span class="line">    ])</span><br><span class="line">    dequantized_blocks = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> quantized_blocks:</span><br><span class="line">        dequant = block * QY</span><br><span class="line">        dequantized_blocks.append(dequant)</span><br><span class="line">    <span class="comment"># 反DCT</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">IDCT_block</span>(<span class="params">block</span>):</span><br><span class="line">        block += <span class="number">128</span></span><br><span class="line">        idct = np.zeros((<span class="number">8</span>, <span class="number">8</span>), dtype=np.float32)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                sum_val = <span class="number">0.0</span></span><br><span class="line">                <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        sum_val += alpha(u) * alpha(v) * block[u, v] * math.cos((<span class="number">2</span>*x + <span class="number">1</span>) * u * math.pi / <span class="number">16</span>) * math.cos((<span class="number">2</span>*y + <span class="number">1</span>) * v * math.pi / <span class="number">16</span>)</span><br><span class="line">                idct[x, y] = <span class="number">0.25</span> * sum_val</span><br><span class="line">        <span class="keyword">return</span> np.clip(np.<span class="built_in">round</span>(idct), <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    reconstructed_blocks = [IDCT_block(block) <span class="keyword">for</span> block <span class="keyword">in</span> dequantized_blocks]</span><br><span class="line">    <span class="comment"># 合并块</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_blocks</span>(<span class="params">blocks, image_shape</span>):</span><br><span class="line">        h, w = image_shape</span><br><span class="line">        h_padded = h <span class="keyword">if</span> h % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> h + (<span class="number">8</span> - h % <span class="number">8</span>)</span><br><span class="line">        w_padded = w <span class="keyword">if</span> w % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> w + (<span class="number">8</span> - w % <span class="number">8</span>)</span><br><span class="line">        image = np.zeros((h_padded, w_padded), dtype=np.uint8)</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h_padded, <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w_padded, <span class="number">8</span>):</span><br><span class="line">                image[i:i+<span class="number">8</span>, j:j+<span class="number">8</span>] = reconstructed_blocks[idx]</span><br><span class="line">                idx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> image[:h, :w]</span><br><span class="line"></span><br><span class="line">    reconstructed_Y = merge_blocks(reconstructed_blocks, image_shape=(Y.shape))</span><br><span class="line">    <span class="comment"># 上采样</span></span><br><span class="line">    U_reconstructed, V_reconstructed = upsample(U_ds, V_ds)</span><br><span class="line">    <span class="comment"># 转换回RGB</span></span><br><span class="line">    reconstructed_image = yuv_to_rgb(reconstructed_Y, U_reconstructed, V_reconstructed)</span><br><span class="line">    <span class="keyword">return</span> reconstructed_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jpeg_compress_decompress</span>(<span class="params">image_path, output_path</span>):</span><br><span class="line">    dpcm_dc, rle_ac = jpeg_compress(image_path)</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    Y, U, V = rgb_to_yuv(image)</span><br><span class="line">    reconstructed_YUV = jpeg_decompress(dpcm_dc, rle_ac, Y.shape)</span><br><span class="line">    cv2.imwrite(output_path, reconstructed_YUV)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;重建图像已保存至 <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_image = <span class="string">&#x27;data/dog.jpg&#x27;</span>      <span class="comment"># 输入图像路径</span></span><br><span class="line">    output_image = <span class="string">&#x27;output.jpg&#x27;</span>       <span class="comment"># 输出图像路径</span></span><br><span class="line">    jpeg_compress_decompress(input_image, output_image)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：上述代码为简化版，实现了JPEG压缩的基本流程，但未涉及熵编码和更复杂的压缩优化。在实际应用中，JPEG标准包含更多细节，如霍夫曼编码、不同的量化表选择等。</p><p>运行上述代码，可以对原始图像进行压缩与解压缩，观察压缩效果与图像质量变化。</p><h2 id="4-在线体验">4.在线体验</h2><p>在线体验：<a href="http://127.0.0.1:5000/">点击这里，在线体验JPEG图片压缩</a></p>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼编码</title>
      <link href="/2024/12/17/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
      <url>/2024/12/17/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>此页面用于多媒体技术大作业展示</p></div><h3 id="1-哈夫曼编码简介">1. 哈夫曼编码简介</h3><p>哈夫曼编码通过构建哈夫曼树来生成编码。哈夫曼树是一棵二叉树，其构建过程如下：</p><ol><li><p><strong>初始化</strong>：</p><p>将所有符号作为叶子节点，每个节点的权重为该符号出现的频率。</p></li><li><p><strong>构建树</strong>：</p><p>重复以下步骤，直到只剩下一个节点：</p><ul><li>选择两个权重最小的节点作为子节点，创建一个新节点，其权重为两个子节点权重之和。</li><li>将新节点添加到节点集合中，并删除两个子节点。</li></ul></li></ol><p>最终剩下的一个节点即为哈夫曼树的根节点。</p><h3 id="2-构建哈夫曼树">2. 构建哈夫曼树</h3><p>假设有字符集及其频率如下：</p><table><thead><tr><th>字符</th><th>频率</th></tr></thead><tbody><tr><td>A</td><td>45</td></tr><tr><td>B</td><td>13</td></tr><tr><td>C</td><td>12</td></tr><tr><td>D</td><td>16</td></tr><tr><td>E</td><td>9</td></tr><tr><td>F</td><td>5</td></tr></tbody></table><p><strong>步骤1：统计频率</strong></p><p><strong>步骤2：构建节点</strong></p><p>每个字符作为一个节点。</p><p><strong>步骤3：构建哈夫曼树</strong></p><ol><li>按频率排序：F (5), E (9), C (12), B (13), D (16), A (45)</li><li>合并频率最小的两个节点：F 和 E 合并，得到新节点 FE，频率为 14。</li><li>排序并插入新节点：C (12), B (13), FE (14), D (16), A (45)</li><li>重复上述步骤：<ul><li>合并 C 和 B，得到新节点 CB，频率为 25。</li><li>排序并插入新节点：FE (14), D (16), CB (25), A (45)</li><li>合并 FE 和 D，得到新节点 FED，频率为 30。</li><li>排序并插入新节点：CB (25), FED (30), A (45)</li><li>合并 CB 和 FED，得到新节点 CBFED，频率为 55。</li><li>排序并插入新节点：CBFED (55), A (45)</li><li>最后合并 A 和 CBFED，得到根节点，频率为 100。</li></ul></li></ol><p>构建的哈夫曼树如下图所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="selector-attr">[100]</span></span><br><span class="line">   /    \</span><br><span class="line"><span class="selector-attr">[45]</span>   <span class="selector-attr">[55]</span></span><br><span class="line"><span class="selector-tag">A</span>      /  \</span><br><span class="line">    <span class="selector-attr">[25]</span>  <span class="selector-attr">[30]</span></span><br><span class="line">   /  \   /  \</span><br><span class="line"> <span class="selector-attr">[12]</span><span class="selector-attr">[13]</span><span class="selector-attr">[14]</span><span class="selector-attr">[16]</span></span><br><span class="line">  C    <span class="selector-tag">B</span>  / \</span><br><span class="line">        <span class="selector-attr">[5]</span> <span class="selector-attr">[9]</span></span><br><span class="line">        F    E</span><br></pre></td></tr></table></figure><p><strong>步骤4：生成编码</strong></p><p>根据哈夫曼树生成编码：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">101</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">1101</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">1100</td></tr></tbody></table><h3 id="3-哈夫曼编码的最优性证明">3. 哈夫曼编码的最优性证明</h3><h4 id="3-1-无前缀性">3.1 无前缀性</h4><p>首先，哈夫曼编码是无前缀编码，因为任何字符的编码都不会是其他字符编码的前缀。这是由于哈夫曼树的构造方式决定的，每个叶子节点到根节点的路径唯一。</p><h4 id="3-2-最优性">3.2 最优性</h4><p>为了证明哈夫曼编码的最优性，我们需要证明它产生的平均编码长度是最小的。假设有另一种无前缀编码方案，平均编码长度为 𝐿′<em>L</em>′。我们要证明哈夫曼编码的平均长度 𝐿≤𝐿′<em>L</em>≤<em>L</em>′。</p><ul><li>设字符集为 {𝑥1,𝑥2,…,𝑥𝑛}，每个字符的频率为 𝑝𝑖，编码长度为 𝑙𝑖。</li><li>哈夫曼编码的平均长度 𝐿<em>L</em> 为：</li></ul><p>$$<br>L = \sum_{i=1}^{n} p_i l_i<br>$$</p><ul><li>如果存在另一种编码方案，其平均长度为 𝐿′<em>L</em>′，则：</li></ul><p>$$<br>L’ = \sum_{i=1}^{n} p_i l’_i<br>$$</p><p>由于哈夫曼树每次合并的是频率最低的两个节点，并且以贪心方式选择最优合并，因此没有其他合并方案能够产生比哈夫曼编码更短的平均编码长度。</p><h4 id="3-3-贪心性质证明">3.3 贪心性质证明</h4><p>要证明赫夫曼编码为最优前缀码，只需证明最优前缀码问题符合贪心算法的性质即可，即具有最优子结构性质和贪心选择性质。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">initHuffmanTree</span><span class="params">(huffmanTree&amp; HT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HT = (htNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(htNode) * (<span class="number">2</span> * NODENUM));<span class="comment">//给HT分配2 * NODENUM个htNOde大小的htNode类型的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * NODENUM - <span class="number">1</span>; i++)<span class="comment">//下标从1开始到2 * NODENUM</span></span><br><span class="line">&#123;</span><br><span class="line">HT[i].parent = HT[i].lch = HT[i].rch = <span class="number">-1</span>;<span class="comment">//双亲和孩子的值都置为-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input some weight!\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= NODENUM; i++)<span class="comment">//权值只有1-n个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;HT[i].weight);<span class="comment">//给每个结点赋予权值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">getchar</span>();<span class="comment">//这个来接收上面的回车</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input some data!\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= NODENUM; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//scanf(&quot;%c &quot;,&amp;HT[i].data);</span></span><br><span class="line"><span class="type">char</span> a = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(a == <span class="string">&#x27;\n&#x27;</span>)<span class="comment">//遇到回车就结束</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">HT[i].data = a;<span class="comment">//给每个结点赋予数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-最优子结构性质"><strong>1.最优子结构性质</strong></h5><p>最优前缀码问题具有最优子结构性质，即局部最优解就是整体的最优解。</p><p>设T是字符集C{a,b,c,d}的最优前缀码，令f(x)=f©+f(d)，证明：T1是字符集C′={a,b,x}的最优前缀码。</p><p>证明：假设T1不是字符集C1的最优前缀码，则设字符集C2的最优前缀码为T2，B(T1)&gt;B(T2)。</p><p>将字符c、d加入到T2中，作为字符b的子节点，构成的树为T3，则有T3是字符集C的一种编码方案。</p><p>由此，B(T)=B(T1)+f©+f(d)，同理有B(T3)=B(T2)+f©+f(d)。</p><p>由于B(T1)&gt;B(T2)，所以B(T)&gt;B(T3)。</p><p>这说明T不是字符集C的最优前缀码，这与T是字符集C的最优前缀码矛盾，假设不成立，即T1是C1的最优前缀码。</p><h5 id="2-贪心选择性质"><strong>2.贪心选择性质</strong></h5><p>贪心选择性质决定了存在从最小频率节点开始建树的贪心最优解。</p><p>设x、y是C中具有最小频度的两个字符，需证明存在字符集C的一个最优前缀码方案T，使得x、y具有相同的码长，且最后一位编码不同。</p><p>如果T中，x、y在最底端同一层，那么T就是贪心选择开始的最优前缀码。</p><p>如果T中，x、y不在底端，那么设T中字符b、c是最深的叶子且互为兄弟。</p><p>由于x,y是字符集C中频度最小的两个字符，所以有f(x)≤f(b)、f(x)≤f©、f(y)≤f(b)、f(y)≤f©，交换树T中的字符x和字符b得到树T1。</p><p>T1:</p><p>在树T和T1中，T(x) =T1(b)，T(b) =T1(x)</p><p>f(x)-f(b)≤0，T(x) -T(b) ≤0，</p><p>故B(T)-B(T1)≥0，B(T)≥B(T1)。</p><p>再交换字符y和字符c，得到树T2。</p><p>同理可以证明B(T1)≥B(T2)，由此B(T)≥B(T1) ≥B(T2)。</p><p>又由于T是字符集C的最优前缀码，所以B(T)≤B(T2)。所以B(T)=B(T2)，即T2中，x、y字符处于最底端同一层，是从贪心选择开始的最优解。</p><h4 id="3-4-交换法则证明">3.4 交换法则证明</h4><p>通过数学归纳法和交换法则也可以证明哈夫曼编码的最优性：</p><ol><li>对于最小频率的两个符号，最优编码方案一定是把它们合并成一个节点。</li><li>合并后形成的新节点继续应用哈夫曼编码，整体最优。</li></ol><p>通过归纳和贪心算法，可以证明哈夫曼编码在每一步都保证了部分最优，最终达到全局最优。</p><h3 id="4-结论">4. 结论</h3><p>综上所述，通过哈夫曼树的构造过程、无前缀性的保证以及平均编码长度的最优性证明，哈夫曼编码确实是最优的无前缀编码。这种编码方法在数据压缩中广泛应用，能够有效减少存储空间。</p>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
